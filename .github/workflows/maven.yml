name: Build Java with Maven

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, synchronize]
    branches: [master]

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  checks: write

jobs:
  build:
    name: Build On

    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]


    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Clone code from repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: Cache m2 dependencies
        uses: actions/cache@v4
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-    

      #            UBUNTU JOBS


      - name: Build with Maven - Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run:  mvn clean -e install -Dmaven.test.skip=true

      - name: Test with Maven - Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          mkdir -p target/allure-results-${{ matrix.os }}

          mvn test -PUbuntuTest -Dallure.results.directory=target/allure-results-ubuntu-latest
          ls -la target/allure-results-${{ matrix.os }}
          mvn allure:report -PUbuntuTest -Dallure.results.directory=target/allure-results-ubuntu-latest
          ls -la target/allure-results-${{ matrix.os }}

      - name: Debug Allure Output
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "Contents of target:"
          ls -l target
          echo "Contents of target/allure-results-ubuntu:"
          ls -l target/allure-results-${{ matrix.os }} || echo "No allure-results directory"


      #             WINDOWS JOBS

      - name: Build with Maven - Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run:  |
          mvn clean -e install '-Dmaven.test.skip=true'
          choco install microsoft-edge
          choco install selenium-edge-driver
          mkdir target/allure-results-${{ matrix.os }}

      - name: Test with Maven - Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |

          mvn test -PWindowsTest "-Dallure.results.directory=target/allure-results-windows-latest"
          mvn allure:report -PWindowsTest "-Dallure.results.directory=target/allure-results-windows-latest"


      #             MACOS JOBS

      - name: Build with Maven - MacOs
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          mvn clean -e install -Dmaven.test.skip=true
          
          sudo safaridriver --enable
          defaults write com.apple.Safari IncludeDevelopMenu -bool true
          defaults write com.apple.Safari AllowRemoteAutomation 1

      - name: Test with Maven - MacOs
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          mkdir -p target/allure-results-${{ matrix.os }}

          mvn test -PMacosTest -Dallure.results.directory=target/allure-results-macos-13
          ls -la target/allure-results-${{ matrix.os }}
          mvn allure:report -PMacosTest -Dallure.results.directory=target/allure-results-macos-13
          ls -la target/allure-results-${{ matrix.os }}


      #          Dorny Test Reporter

      - name: Dorny Test Reporter
        uses: dorny/test-reporter@v1.9.1
        if: success() || failure()
        with:
          name: Test Report for ${{ matrix.os }}
          path: target/surefire-reports/TEST-*.xml
          reporter: java-junit

      #          ALLURE

      - name: Upload Allure Results Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: target/allure-results-ubuntu-latest

      - name: Upload Allure Results Windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-windows-latest
          path: target/allure-results-windows-latest

      - name: Upload Allure Results Macos
        if: ${{ matrix.os == 'macos-13' }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-macos-13
          path: target/allure-results-macos-13


  merge-reports:
    name: Merge Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Allure
        run: |
          curl -o allure-2.29.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.29.0/allure-commandline-2.29.0.tgz
          sudo tar -zxvf allure-2.29.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.29.0/bin/allure /usr/bin/allure
          allure --version

      - name: Download Allure Results (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: reports/ubuntu
          merge-multiple: true

      - name: Download Allure Results (Windows)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: reports/windows
          merge-multiple: true

      - name: Download Allure Results (macOS)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-macos-13
          path: reports/macos
          merge-multiple: true

      - name: List Downloaded Reports for Debugging
        run: |
          echo "Ubuntu Allure Results:"|| echo "Not found"
          ls -l reports/ubuntu 
          echo "Windows Allure Results:"|| echo "Not found"
          ls -l reports/windows
          echo "macOS Allure Results:"|| echo "Not found"
          ls -l reports/macos     

      - name: Merge Allure Reports
        run: |
          echo "Checking for available allure results..."
          found=""
          [ -d reports/ubuntu ] && [ "$(ls -A reports/ubuntu)" ] && found="yes"
          [ -d reports/windows ] && [ "$(ls -A reports/windows)" ] && found="yes"
          [ -d reports/macos ] && [ "$(ls -A reports/macos)" ] && found="yes"

          if [ "$found" = "yes" ]; then
            echo "Generating Allure Report..."
            allure generate reports/ubuntu reports/windows reports/macos --clean -o allure-report || echo "Allure generation failed"
          else
            echo "No Allure results found. Skipping report generation."
            mkdir -p allure-report && echo "<html><body><h1>No Allure Results Available</h1></body></html>" > allure-report/index.html
          fi

      - name: List Merged Allure Report for Debugging
        run: |
          echo "Merged Allure Report:"
          ls -l allure-report

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report

  #          CODE-STYLE

  check-java-code-style:
    name: Check Java code style

    runs-on: ubuntu-latest

    steps:
      - name: Clone code from repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run java checkstyle
        uses: nikitasavinov/checkstyle-action@0.6.0